/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tugas.pbo.tm5;

/**
 *
 * @author zahidahhanumalzahra
 */
import javax.swing.JOptionPane; // Untuk JOptionPane
import java.sql.Connection; // Untuk Connection
import java.sql.DriverManager; // Untuk DriverManager
import java.sql.PreparedStatement; // Untuk PreparedStatement
import java.sql.SQLException; // Untuk SQLException
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;



public class HanumFrame extends javax.swing.JFrame {

    /**
     * Creates new form HanumFrame
     */
    public HanumFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jButtonTambahData = new javax.swing.JButton();
        jButtonHapusData = new javax.swing.JButton();
        jButtonUpdateData = new javax.swing.JButton();
        jTextFieldNama = new javax.swing.JTextField();
        jTextFieldNIM = new javax.swing.JTextField();
        jTextFieldAlamat = new javax.swing.JTextField();
        jLabelNIM = new javax.swing.JLabel();
        jLabelNama = new javax.swing.JLabel();
        jLabelAlamat = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableData);

        jButtonTambahData.setText("Tambah");
        jButtonTambahData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTambahDataActionPerformed(evt);
            }
        });

        jButtonHapusData.setText("Hapus");
        jButtonHapusData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHapusDataActionPerformed(evt);
            }
        });

        jButtonUpdateData.setText("Update");
        jButtonUpdateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDataActionPerformed(evt);
            }
        });

        jLabelNIM.setText("NIM");

        jLabelNama.setText("Nama");

        jLabelAlamat.setText("Alamat");

        jLabel4.setText("DATA MAHASISWA UNIVERSITAS MANGGA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNIM)
                            .addComponent(jLabelNama)
                            .addComponent(jLabelAlamat))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNIM)
                            .addComponent(jTextFieldNama)
                            .addComponent(jTextFieldAlamat, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 71, Short.MAX_VALUE)
                        .addComponent(jButtonTambahData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpdateData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonHapusData)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNIM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNIM))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNama))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAlamat))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonTambahData)
                            .addComponent(jButtonUpdateData)
                            .addComponent(jButtonHapusData))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addGap(70, 70, 70))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData() {
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String url = "jdbc:postgresql://localhost:5432/Mahasiswa";
        String user = "postgres";
        String password = "197300";
        conn = DriverManager.getConnection(url, user, password);

        String sql = "SELECT * FROM Mahasiswa";
        ps = conn.prepareStatement(sql);
        rs = ps.executeQuery();

        // Mengambil data dari ResultSet dan memasukkan ke DefaultTableModel
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("NIM");
        model.addColumn("Nama");
        model.addColumn("Alamat");

        while (rs.next()) {
            model.addRow(new Object[] {
                rs.getString("NIM"),
                rs.getString("Nama"),
                rs.getString("Alamat")
            });
        }

        jTableData.setModel(model); // Set model untuk jTableData
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    
    private void jButtonHapusDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHapusDataActionPerformed
                                                       
    String nim = jTextFieldNIM.getText();

    if (nim.isEmpty()) {
        JOptionPane.showMessageDialog(this, "NIM harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Connection conn = null;
    PreparedStatement ps = null;

    try {
        // Koneksi ke PostgreSQL database Mahasiswa
        String url = "jdbc:postgresql://localhost:5432/Mahasiswa";
        String user = "postgres"; // Ganti dengan username PostgreSQL
        String password = "197300"; // Ganti dengan password PostgreSQL
        conn = DriverManager.getConnection(url, user, password);

        // Query untuk menghapus data dari tabel Mahasiswa
        String sql = "DELETE FROM Mahasiswa WHERE NIM = ?";
        ps = conn.prepareStatement(sql);
        ps.setString(1, nim);

        // Eksekusi query
        int rowsAffected = ps.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
        } else {
            JOptionPane.showMessageDialog(this, "NIM tidak ditemukan, tidak ada data yang dihapus.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
}

    }//GEN-LAST:event_jButtonHapusDataActionPerformed

    private void jButtonTambahDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTambahDataActionPerformed
                                                                                             
    // Mendapatkan input dari form
    String nim = jTextFieldNIM.getText();
    String nama = jTextFieldNama.getText();
    String alamat = jTextFieldAlamat.getText();
    
    if (nim.equals("") || nama.equals("") || alamat.equals("")) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Connection conn = null;
    PreparedStatement ps = null;

    try {
        // Koneksi ke database PostgreSQL
        String url = "jdbc:postgresql://localhost:5432/Mahasiswa";
        String user = "postgres"; // Ganti dengan username PostgreSQL kamu
        String password = "197300"; // Ganti dengan password PostgreSQL kamu
        conn = DriverManager.getConnection(url, user, password);

        // SQL query untuk memasukkan data
        String sql = "INSERT INTO Mahasiswa (NIM, Nama, Alamat) VALUES (?, ?, ?)";
        ps = conn.prepareStatement(sql);
        ps.setString(1, nim);
        ps.setString(2, nama);
        ps.setString(3, alamat);
        
        // Eksekusi query
        ps.executeUpdate();
        
        // Menampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
        
        // Mengosongkan field setelah input
        jTextFieldNIM.setText("");
        jTextFieldNama.setText("");
        jTextFieldAlamat.setText("");

        // Memuat ulang data ke jTableData
        loadData();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    }//GEN-LAST:event_jButtonTambahDataActionPerformed

    private void jButtonUpdateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDataActionPerformed
                                                
    // Mendapatkan input dari form
    String nim = jTextFieldNIM.getText();
    String nama = jTextFieldNama.getText();
    String alamat = jTextFieldAlamat.getText();
    
    // Validasi input tidak kosong
    if (nim.isEmpty() || nama.isEmpty() || alamat.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    Connection conn = null;
    PreparedStatement ps = null;

    try {
        // Koneksi ke database PostgreSQL
        String url = "jdbc:postgresql://localhost:5432/Mahasiswa";
        String user = "postgres"; // Ganti dengan username PostgreSQL kamu
        String password = "197300"; // Ganti dengan password PostgreSQL kamu
        conn = DriverManager.getConnection(url, user, password);

        // SQL query untuk update data berdasarkan NIM
        String sql = "UPDATE Mahasiswa SET Nama = ?, Alamat = ? WHERE NIM = ?";
        ps = conn.prepareStatement(sql);
        ps.setString(1, nama);
        ps.setString(2, alamat);
        ps.setString(3, nim);
        
        // Eksekusi query
        int rowsUpdated = ps.executeUpdate();
        
        // Cek apakah data berhasil diperbarui
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diperbarui!");
        } else {
            JOptionPane.showMessageDialog(this, "NIM tidak ditemukan, tidak ada data yang diperbarui.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Mengosongkan field setelah update
        jTextFieldNIM.setText("");
        jTextFieldNama.setText("");
        jTextFieldAlamat.setText("");
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
                           

    }//GEN-LAST:event_jButtonUpdateDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HanumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HanumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HanumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HanumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HanumFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonHapusData;
    private javax.swing.JButton jButtonTambahData;
    private javax.swing.JButton jButtonUpdateData;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAlamat;
    private javax.swing.JLabel jLabelNIM;
    private javax.swing.JLabel jLabelNama;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableData;
    private javax.swing.JTextField jTextFieldAlamat;
    private javax.swing.JTextField jTextFieldNIM;
    private javax.swing.JTextField jTextFieldNama;
    // End of variables declaration//GEN-END:variables
}
